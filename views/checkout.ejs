<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout - KAMADA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
      #map div.leaflet-map-pane {
        position: absolute !important;
        top: 0;
        left: 0;
        width: 100% !important;
        height: 100% !important;
      }
      .my-custom-marker {
        width: 30px;
        height: 42px;
        background-image: url("https://maps.google.com/mapfiles/ms/icons/red-dot.png");
        background-size: contain;
        background-repeat: no-repeat;
        cursor: pointer;
        transform: translateY(-42px);
        transform-origin: 50% 100%;
      }
    </style>
  </head>

  <body class="bg-gray-100 min-h-screen flex flex-col">
    <header class="bg-white shadow-md p-4">
      <div class="container mx-auto">
        <nav class="flex items-center justify-start">
          <a href="#" class="text-xl font-bold">Kamada</a>
        </nav>
      </div>
    </header>

    <main class="flex-grow p-6">
      <div class="bg-white rounded-lg shadow-md p-6 lg:mx-32 xl:mx-56">
        <div class="flex flex-col md:flex-row h-full sm:h-[70vh]">
          <div
            class="w-full md:w-1/2 pr-0 md:pr-4 flex flex-col sm:w-full h-full"
          >
            <section class="mb-4 grow flex flex-col h-1/2 max-h-1/2 min-h-1/2">
              <h2 class="text-xl font-semibold mb-4">Uploaded Files</h2>
              <div
                id="uploadedFilesContainer"
                class="grow flex flex-col gap-2 overflow-y-auto border border-gray-300 p-4 rounded-md h-full"
              ></div>
            </section>

            <div
              id="designNotesDisplay"
              class="mb-4 grow flex flex-col h-1/2 max-h-1/2 min-h-1/2"
            >
              <h3 class="font-semibold mb-2">Design Notes:</h3>
              <p
                id="designNotesContent"
                class="border rounded p-2 flex-grow overflow-y-auto h-full"
              ></p>
            </div>
          </div>

          <div
            class="w-full md:w-1/2 pl-0 md:pl-4 mt-4 md:mt-0 sm:w-full h-full"
          >
            <div
              id="orderListDisplay"
              class="h-full bg-gray-100 rounded-lg p-4 h-full"
            >
              <h3 class="font-semibold mb-2">Order List:</h3>
              <div id="orderList" class="h-full overflow-y-auto"></div>
            </div>
          </div>
        </div>
      </div>

      <section
        id="personalDataSection"
        class="mt-4 bg-white p-6 lg:mx-32 xl:mx-56 rounded-md"
      >
        <h2 class="text-xl font-semibold mb-4">Personal Data</h2>
        <form id="personalDataForm">
          <input type="hidden" id="guestId" name="guestId" />
          <input type="hidden" id="coordinates" name="coordinates" required />
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label
                for="fullName"
                class="block text-sm font-medium text-gray-700"
                >Full Name <span class="text-red-500">*</span></label
              >
              <input
                type="text"
                id="fullName"
                name="fullName"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              />
            </div>
            <div>
              <label
                for="companyName"
                class="block text-sm font-medium text-gray-700"
                >Company Name
                <span class="text-gray-500">(Optional)</span></label
              >
              <input
                type="text"
                id="companyName"
                name="companyName"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              />
            </div>
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700"
                >Email <span class="text-red-500">*</span></label
              >
              <input
                type="email"
                id="email"
                name="email"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              />
            </div>
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700"
                >Contact Number <span class="text-red-500">*</span></label
              >
              <input
                type="tel"
                id="phone"
                name="phone"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              />
            </div>
            <div>
              <label
                for="street"
                class="block text-sm font-medium text-gray-700"
                >Street <span class="text-red-500">*</span></label
              >
              <input
                type="text"
                id="street"
                name="street"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              />
            </div>
            <div>
              <label
                for="barangay"
                class="block text-sm font-medium text-gray-700"
                >Barangay <span class="text-red-500">*</span></label
              >
              <input
                type="text"
                id="barangay"
                name="barangay"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                required
              />
            </div>
            <div>
              <label for="city" class="block text-sm font-medium text-gray-700"
                >City <span class="text-red-500">*</span></label
              >
              <input
                type="text"
                id="city"
                name="city"
                value="Zamboanga City"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-gray-100 text-gray-500"
                readonly
                required
              />
            </div>
            <div>
              <label
                for="postalCode"
                class="block text-sm font-medium text-gray-700"
                >Postal Code <span class="text-red-500">*</span></label
              >
              <input
                type="text"
                id="postalCode"
                name="postalCode"
                value="7000"
                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-gray-100 text-gray-500"
                readonly
                required
              />
            </div>
          </div>
          <button
            type="submit"
            id="hiddenSubmit"
            style="display: none"
          ></button>
        </form>
        <div id="map" class="w-full h-[600px] mt-8 rounded-lg"></div>
      </section>
    </main>

    <footer class="bg-black p-4 shadow-inner mt-auto">
      <div
        class="container text-white mx-auto flex justify-between items-center"
      >
        <div id="totalPriceBreakdown">
          <p>Total: Php 0.00</p>
        </div>
        <button
          id="confirmCheckoutButton"
          class="bg-white hover:bg-slate-200 text-black font-bold py-2 px-4 rounded"
        >
          Confirm Checkout
        </button>
      </div>
    </footer>

    <script>
      // Get data from sessionStorage
      const designNotes = sessionStorage.getItem("designNotes");
      const filesArray = JSON.parse(sessionStorage.getItem("filesArray"));
      const orderListItems = JSON.parse(
        sessionStorage.getItem("orderListItems")
      );

      if (!designNotes || !filesArray || !orderListItems) {
        window.location.href = "/design-details";
      }

      // Get the container element
      const uploadedFilesContainer = document.getElementById(
        "uploadedFilesContainer"
      );

      // Function to create a file card
      function createFileCard(fileObj) {
        const fileCard = document.createElement("div");
        fileCard.classList.add(
          "flex",
          "items-center",
          "justify-between",
          "p-4",
          "border",
          "rounded-lg",
          "mb-2"
        );

        const fileName =
          fileObj.name.length > 20
            ? fileObj.name.substring(0, 20) + "..."
            : fileObj.name;

        const extensionColor = getExtensionColor(
          fileObj.extension.toUpperCase()
        );

        const { size, unit } = formatFileSize(fileObj.size);

        fileCard.innerHTML = `
                <div class="flex items-center">
                  <div class="w-16 h-10 rounded-lg flex items-center justify-center text-white mr-4 font-medium" style="background-color: ${extensionColor};">
                    ${fileObj.extension.toUpperCase()}
                  </div>
                  <div>
                    <p>${fileName}</p>
                    <p class="text-xs text-gray-500">${size} ${unit.toLocaleUpperCase()}</p>
                  </div>
                </div>
              `;

        return fileCard;
      }

      // Function to get appropriate file size unit
      function formatFileSize(bytes) {
        if (bytes < 1024) {
          return { size: bytes.toFixed(2), unit: "B" };
        } else if (bytes < 1024 * 1024) {
          return { size: (bytes / 1024).toFixed(2), unit: "KB" };
        } else if (bytes < 1024 * 1024 * 1024) {
          return { size: (bytes / (1024 * 1024)).toFixed(2), unit: "MB" };
        } else if (bytes < 1024 * 1024 * 1024 * 1024) {
          return {
            size: (bytes / (1024 * 1024 * 1024)).toFixed(2),
            unit: "GB",
          };
        } else {
          return {
            size: (bytes / (1024 * 1024 * 1024 * 1024)).toFixed(2),
            unit: "TB",
          };
        }
      }

      // Function to get extension color (same as before)
      function getExtensionColor(extension) {
        const colors = {
          PSD: "#29ABE2",
          AI: "#FF7300",
          EPS: "#800080",
          SVG: "#E91E63",
          PDF: "#FF6347",
          PNG: "#90EE90",
          JPG: "#FFA07A",
          JPEG: "#FFA07A",
          GIF: "#DDA0DD",
          TIFF: "#00CED1",
          TIF: "#00CED1",
          BMP: "#A9A9A9",
          RAW: "#8B4513",
          CR2: "#8B4513",
          NEF: "#8B4513",
          DNG: "#8B4513",
          DOC: "#4682B4",
          DOCX: "#4682B4",
          TXT: "#20B2AA",
          ZIP: "#FFD700",
          RAR: "#FFD700",
          CSV: "#778899",
        };
        return colors[extension] || "#808080";
      }

      // Display the files
      filesArray.forEach((file) => {
        const fileCard = createFileCard(file);
        uploadedFilesContainer.appendChild(fileCard);
      });

      // Display the design notes
      designNotesContent.textContent = designNotes;

      // Get the order list container element
      const orderListContainer = document.getElementById("orderList");

      // Function to create an order item card (modified)
      function createOrderItemCard(item) {
        const itemCard = document.createElement("div");
        itemCard.classList.add(
          "flex",
          "items-center",
          "p-4",
          "border",
          "rounded-lg",
          "mb-2",
          "bg-white" // Added white background
        );

        const itemName = item.garment;
        const quantity = item.quantity;
        const size = item.size; // Assuming you have size in your item object
        const color = item.color; // Assuming you have color in your item object
        const fabric = item.fabrics; // Assuming you have fabric in your item object

        // Determine text color based on item color
        const textColor = color.toLowerCase() === "white" ? "black" : "white";

        itemCard.innerHTML = `
        <div class="flex items-center">
            <div class="w-12 h-12 rounded-full flex items-center justify-center font-bold text-xl mr-4" style="background-color: ${color}; color: ${textColor}; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
                ${size.substring(0, 2).toUpperCase()} 
            </div>
            <div>
                <p class="text-sm text-gray-500">Fabric: ${fabric}</p>
                <p class="font-semibold">${itemName}</p>
                <p class="text-sm text-gray-500">Size: ${size}, Color: ${color}, Quantity: ${quantity}</p>
            </div>
        </div>
    `;

        return itemCard;
      }

      // Display the order list items
      orderListItems.forEach((item) => {
        const itemCard = createOrderItemCard(item);
        orderListContainer.appendChild(itemCard);
      });

      // Initialize the map
      const map = L.map("map").setView(
        [6.9439865896984365, 122.07140922546388],
        13
      ); // Default to Zamboanga City

      // Add a tile layer (OpenStreetMap)
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution:
          '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      }).addTo(map);

      // Get the coordinates input field
      const coordinatesInput = document.getElementById("coordinates");

      let marker = null; // Store the marker instance

      // Handle map clicks
      map.on("click", function (event) {
        if (marker) {
          // Remove existing marker
          map.removeLayer(marker);
          marker = null;
          coordinatesInput.value = ""; // Clear coordinates
        } else {
          // Create new marker
          marker = L.marker(event.latlng).addTo(map);
          coordinatesInput.value = `${event.latlng.lat},${event.latlng.lng}`;
        }
      });

      // confirm checkout functionaity
      const confirmCheckoutButton = document.getElementById(
        "confirmCheckoutButton"
      );

      confirmCheckoutButton.addEventListener("click", function (event) {
        event.preventDefault(); // Prevent form submission (for now)
        validateForm();
      });

      function validateForm() {
        const fullName = document.getElementById("fullName").value.trim();
        const email = document.getElementById("email").value.trim();
        const phone = document.getElementById("phone").value.trim();
        const street = document.getElementById("street").value.trim();
        const barangay = document.getElementById("barangay").value.trim();
        const coordinates = document.getElementById("coordinates").value.trim();

        if (!fullName) {
          showErrorModal("Full Name is required.");
          return;
        }

        if (!email) {
          showErrorModal("Email is required.");
          return;
        }

        if (!validateEmail(email)) {
          showErrorModal("Please enter a valid email address.");
          return;
        }

        if (!phone) {
          showErrorModal("Contact Number is required.");
          return;
        }

        if (!validatePhone(phone)) {
          showErrorModal("Please enter a valid phone number (09XXXXXXXXX).");
          return;
        }

        if (!street) {
          showErrorModal("Street is required.");
          return;
        }

        if (!barangay) {
          showErrorModal("Barangay is required.");
          return;
        }

        if (!coordinates) {
          showErrorModal("Please select a location on the map.");
          return;
        }

        // If all validations pass, proceed with checkout
        showLoadingModal();

        // Create necessaryData object
        const necessaryData = {
          guestId: sessionStorage.getItem("guestId"),
          filesArray: filesArray, // Assuming filesArray is accessible
          orderItems: orderListItems, // Assuming orderItems is accessible
          designNotes: designNotes, // Assuming designNotes is accessible
          client: {
            fullName: document.getElementById("fullName").value.trim(),
            companyName: document.getElementById("companyName").value.trim(),
            email: document.getElementById("email").value.trim(),
            phone: document.getElementById("phone").value.trim(),
            street: document.getElementById("street").value.trim(),
            barangay: document.getElementById("barangay").value.trim(),
            city: document.getElementById("city").value.trim(),
            postalCode: document.getElementById("postalCode").value.trim(),
            coordinates: document.getElementById("coordinates").value.trim(),
          },
        };

        console.log("Necessary Data:", necessaryData);

        // Send data to server
        fetch("/save-to-firestore", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(necessaryData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((data) => {
            console.log("Firestore save successful:", data);
            Swal.close(); // Close loading modal
            // Proceed with further actions (e.g., show success message)
          })
          .catch((error) => {
            console.error("Firestore save failed:", error);
            Swal.close(); // Close loading modal
            // Show error message to user
          });
      }

      function showErrorModal(message) {
        Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: message,
        });
      }

      function validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      function validatePhone(phone) {
        const phoneRegex = /^09\d{9}$/;
        return phoneRegex.test(phone);
      }

      function showLoadingModal() {
        Swal.fire({
          title: "Please Wait",
          text: "We are processing your order...",
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });
      }
    </script>
  </body>
</html>
