<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout - KAMADA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
      #map div.leaflet-map-pane {
        position: absolute !important;
        top: 0;
        left: 0;
        width: 100% !important;
        height: 100% !important;
      }
      .my-custom-marker {
        width: 30px;
        height: 42px;
        background-image: url("https://maps.google.com/mapfiles/ms/icons/red-dot.png");
        background-size: contain;
        background-repeat: no-repeat;
        cursor: pointer;
        transform: translateY(-42px);
        transform-origin: 50% 100%;
      }
    </style>
  </head>
</html>

<body class="bg-gray-100">
  <div class="container mx-auto p-4">
    <header class="mb-6">
      <h1 class="text-3xl font-bold text-gray-800">Checkout</h1>
    </header>

    <div class="bg-white rounded-lg shadow-md p-6">
      <div class="flex flex-col md:flex-row h-auto md:h-[70vh]">
        <div class="w-full md:w-1/2 pr-0 md:pr-4">
          <section class="mb-4">
            <h2 class="text-xl font-semibold mb-4">Uploaded Designs</h2>
            <div
              class="flex flex-wrap gap-4"
              id="uploadedImagesContainer"
            ></div>
          </section>
          <div id="designNotesDisplay" class="mb-4">
            <h3 class="font-semibold mb-2">Design Notes:</h3>
            <p
              id="designNotesContent"
              class="border rounded p-2 h-full overflow-y-auto"
            ></p>
          </div>
        </div>

        <div class="w-full md:w-1/2 pl-0 md:pl-4 mt-4 md:mt-0">
          <div
            id="shirtDetailsDisplay"
            class="h-full bg-gray-100 rounded-lg p-4"
          >
            <h3 class="font-semibold mb-2">Shirt Details:</h3>
            <div id="shirtDetailsList" class="h-full overflow-y-auto"></div>
          </div>
        </div>
      </div>

      <section id="personalDataSection" class="mt-4">
        <h2 class="text-xl font-semibold mb-4">Personal Data</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label
              for="fullName"
              class="block text-sm font-medium text-gray-700"
              >Full Name <span class="text-red-500">*</span></label
            >
            <input
              type="text"
              id="fullName"
              name="fullName"
              class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              for="companyName"
              class="block text-sm font-medium text-gray-700"
              >Company Name</label
            >
            <input
              type="text"
              id="companyName"
              name="companyName"
              class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700"
              >Email <span class="text-red-500">*</span></label
            >
            <input
              type="email"
              id="email"
              name="email"
              class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <label for="phone" class="block text-sm font-medium text-gray-700"
              >Phone Number <span class="text-red-500">*</span></label
            >
            <input
              type="tel"
              id="phone"
              name="phone"
              class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div class="md:col-span-2">
            <label for="address" class="block text-sm font-medium text-gray-700"
              >Address <span class="text-red-500">*</span></label
            >
            <input
              type="text"
              id="address"
              name="address"
              class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
        </div>
        <div id="map" class="w-full h-[600px] mt-8 rounded-lg"></div>
      </section>

      <div class="mt-6 flex justify-center">
        <button
          id="confirmOrderBtn"
          class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2.5 px-5 rounded-lg focus:outline-none focus:shadow-outline"
        >
          Confirm Order
        </button>
      </div>
    </div>
  </div>

  <script>
    const uploadedImagesContainer = document.getElementById(
      "uploadedImagesContainer"
    );
    const designNotesContent = document.getElementById("designNotesContent");
    const shirtDetailsList = document.getElementById("shirtDetailsList");
    const confirmOrderBtn = document.getElementById("confirmOrderBtn");

    // Get data from sessionStorage
    const frontDesignImage = sessionStorage.getItem("frontDesignImage");
    const backDesignImage = sessionStorage.getItem("backDesignImage");
    const printDetailsImage = sessionStorage.getItem("printDetailsImage");
    const shirtDetails =
      JSON.parse(sessionStorage.getItem("shirtDetails")) || [];
    const designNotes =
      sessionStorage.getItem("designNotes") || "No design notes provided.";

    // Function to create an image element
    function createImageElement(src, label) {
      const container = document.createElement("div");
      container.classList.add(
        "flex",
        "flex-col",
        "items-center",
        "mr-4",
        "flex-shrink-0"
      );
      const img = document.createElement("img");
      img.src = src;
      img.alt = label;
      img.classList.add("max-w-xs", "rounded-md", "shadow-sm", "mb-2");
      const labelElement = document.createElement("p");
      labelElement.textContent = label;
      labelElement.classList.add("text-sm", "text-gray-500");
      container.appendChild(img);
      container.appendChild(labelElement);
      return container;
    }

    // Display uploaded images
    uploadedImagesContainer.classList.add(
      "flex",
      "overflow-x-auto",
      "flex-nowrap"
    ); // Added 'flex-nowrap'
    if (frontDesignImage && frontDesignImage != "null") {
      const frontImageElement = createImageElement(
        frontDesignImage,
        "Front Design"
      );
      uploadedImagesContainer.appendChild(frontImageElement);
    }
    if (backDesignImage && backDesignImage != "null") {
      const backImageElement = createImageElement(
        backDesignImage,
        "Back Design"
      );
      uploadedImagesContainer.appendChild(backImageElement);
    }
    if (printDetailsImage && printDetailsImage != "null") {
      const printDetailsImageElement = createImageElement(
        printDetailsImage,
        "Print Details"
      );
      uploadedImagesContainer.appendChild(printDetailsImageElement);
    }

    // Display design notes
    designNotesContent.textContent = designNotes;

    // Display shirt details
    try {
      shirtDetails.forEach((item) => {
        const itemParts = item.split(" - ");
        const size = itemParts[0];
        const color = itemParts[1];
        const fabric = itemParts[2];
        const quantity = itemParts[3].split("Quantity: ")[1];
        const pricePerShirt = 20;
        const totalAmount = pricePerShirt * quantity;

        const card = document.createElement("div");
        card.classList.add(
          "bg-white",
          "rounded-lg",
          "shadow-md",
          "p-4",
          "mb-2",
          "flex",
          "items-center"
        );

        const colorHint = document.createElement("div");
        colorHint.style.backgroundColor = color;
        colorHint.classList.add(
          "w-8",
          "rounded-l-lg",
          "flex-shrink-0",
          "mr-4",
          "border"
        );

        if (color === "white") {
          colorHint.style.border = "1px solid #ccc";
        }
        colorHint.style.minHeight = "2rem";

        const detailsContainer = document.createElement("div");
        detailsContainer.classList.add("flex", "flex-wrap", "flex-grow");

        const labels = ["Fabric:", "Size:", "Color:", "Price:", "Quantity:"];
        const values = [fabric, size, color, `$${pricePerShirt}`, quantity];

        for (let i = 0; i < labels.length; i++) {
          const detailItem = document.createElement("div");
          detailItem.classList.add("w-1/5", "p-2");

          const label = document.createElement("div");
          label.classList.add("text-sm", "font-semibold", "mb-1");
          label.textContent = labels[i];

          const value = document.createElement("div");
          value.classList.add("text-sm");
          value.textContent = values[i];

          detailItem.appendChild(label);
          detailItem.appendChild(value);
          detailsContainer.appendChild(detailItem);
        }

        const totalContainer = document.createElement("div");
        totalContainer.classList.add("ml-auto", "text-right", "pr-4");
        totalContainer.innerHTML = `<strong>Total:</strong> $${totalAmount}`;

        card.appendChild(detailsContainer);
        card.insertBefore(colorHint, detailsContainer);

        shirtDetailsList.appendChild(card);
      });
    } catch (e) {
      console.error("Error processing shirt details:", e);
    }

    // Map display
    var map = L.map("map").setView([0, 0], 2);
    const zamboangaCoords = [6.9021, 122.0792];

    function onLocationFound(e) {
      // var radius = e.accuracy / 2;  // Removed the radius variable
      // L.circle(e.latlng, radius).addTo(map); // Removed the circle
      map.setView(e.latlng, 17);
    }

    function onLocationError(e) {
      console.log("Location access denied or error:", e.message);
      map.setView(zamboangaCoords, 13);
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution:
          '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      }).addTo(map);
    }

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    map.on("locationfound", onLocationFound);
    map.on("locationerror", onLocationError);

    map.locate({ setView: true, maxZoom: 16, timeout: 10000 });

    var currentMarker = null;
    let markerLatLng = null;

    function onMapClick(e) {
      if (currentMarker !== null) {
        map.removeLayer(currentMarker);
      }
      var myIcon = L.divIcon({
        className: "my-custom-marker",
        iconSize: [30, 30],
        iconAnchor: [15, 30],
        popupAnchor: [0, -30],
      });
      currentMarker = L.marker(e.latlng, { icon: myIcon }).addTo(map);
      markerLatLng = e.latlng;
      currentMarker.bindPopup("You are here").openPopup();
      currentMarker.on("click", function () {
        map.removeLayer(currentMarker);
        currentMarker = null;
        markerLatLng = null;
      });
    }
    map.on("click", onMapClick);

    // checkout functionality
    confirmOrderBtn.addEventListener("click", function () {
      const fullName = document.getElementById("fullName").value;
      const email = document.getElementById("email").value;
      const phone = document.getElementById("phone").value; // Get phone number
      const address = document.getElementById("address").value;
      let companyName = document.getElementById("companyName").value; // Get company name

      let hasErrors = false;
      let errorMessage = "";

      // Validation checks
      if (!fullName) {
        errorMessage = "Please enter your Full Name.";
        hasErrors = true;
      } else if (!email) {
        errorMessage = "Please enter your Email.";
        hasErrors = true;
      } else if (!isValidEmail(email)) {
        errorMessage = "Please enter a valid Email address.";
        hasErrors = true;
      } else if (!phone) {
        errorMessage = "Please enter your Phone Number.";
        hasErrors = true;
      } else if (!isValidPhone(phone)) {
        errorMessage = "Please enter a valid Phone Number (e.g., 09123456789).";
        hasErrors = true;
      } else if (!address) {
        errorMessage = "Please enter your Address.";
        hasErrors = true;
      } else if (markerLatLng === null) {
        errorMessage = "Please click on the map to select your location.";
        hasErrors = true;
      }

      if (hasErrors) {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: errorMessage,
        });
        return; // Stop processing if there are errors
      }

      // If all validations pass, proceed with order confirmation and data submission
      // Simulate sending data to Firestore
      // const orderData = {
      //   fullName: fullName,
      //   email: email,
      //   phone: phone, // Include phone number
      //   address: address,
      //   companyName: companyName, // Include company name
      //   frontDesignImage: frontDesignImage,
      //   backDesignImage: backDesignImage,
      //   printDetailsImage: printDetailsImage,
      //   designNotes: designNotes,
      //   shirtDetails: shirtDetails,
      //   location: markerLatLng
      //     ? {
      //         latitude: markerLatLng.lat,
      //         longitude: markerLatLng.lng,
      //       }
      //     : null, // Include the marker coordinates
      //   timestamp: new Date().toISOString(), // Add a timestamp
      // };

      //   console.log("Order Data:", orderData); // Log the data to the console

      // Simulate sending data to Firestore (replace with actual Firestore code)
      setTimeout(() => {
        Swal.fire({
          icon: "success",
          title: "Order Confirmed!",
          html: `Your order has been confirmed. Please check your email: <strong>${email}</strong> for further instructions.`,
        }).then(() => {
          //   // Clear sessionStorage
          //   sessionStorage.clear();
          //   // Redirect to home page
          //   window.location.href = "/";

          sessionStorage.setItem("fullname", fullName);
          sessionStorage.setItem("email", email);
          sessionStorage.setItem("phone", phone);
          sessionStorage.setItem("address", address);
          sessionStorage.setItem(
            "companyName",
            companyName == "" ? "null" : companyName
          );
          sessionStorage.setItem("locationLat", markerLatLng.lat);
          sessionStorage.setItem("locationLng", markerLatLng.lng);
          sessionStorage.setItem("timestamp", new Date().toISOString());
        });
      }, 2000);
    });

    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function isValidPhone(phone) {
      const phoneRegex = /^09\d{9}$/;
      return phoneRegex.test(phone);
    }
  </script>
</body>
