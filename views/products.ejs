<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KAMADA - Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <header class="bg-cyan-800 text-white">
      <div class="flex justify-between items-center">
        <div class="px-4 md:px-12 lg:px-24 py-5 bg-cyan-800 grow h-full">
          <a href="/" class="text-3xl font-bold italic">KAMADA</a>
        </div>
        <!-- <div class="pl-4 pr-4 py-5 bg-black h-full block md:hidden">
          <a href="/cart" class="text-white">
            <i class="ri-shopping-cart-2-line text-3xl"></i>
          </a>
        </div>

        <div class="pl-4 pr-12 py-5 bg-black h-full hidden md:block lg:hidden">
          <a href="/cart" class="text-2xl text-white">
            <i class="ri-shopping-cart-2-line text-3xl"></i>
            Cart
          </a>
        </div>

        <div class="pl-4 pr-24 py-5 bg-black h-full hidden lg:block">
          <a href="/cart" class="text-2xl text-white">
            <i class="ri-shopping-cart-2-line text-3xl"></i>
            Shopping Cart
          </a>
        </div> -->
      </div>
    </header>

    <main class="container mx-auto mt-8 px-4">
      <div class="bg-white p-6 rounded-lg shadow-md">
        <div class="flex flex-col md:flex-row justify-between items-center">
          <div class="flex items-center mt-2 md:mt-0">
            <button id="prevPage" class="px-3 py-1 bg-gray-200 rounded-md mr-1">
              &lt;
            </button>
            <div id="pageNumbers" class="flex"></div>
            <button id="nextPage" class="px-3 py-1 bg-gray-200 rounded-md">
              &gt;
            </button>
          </div>
          <input
            type="text"
            id="searchInput"
            placeholder="Search"
            class="px-4 py-2 border rounded-md mt-4 md:mt-0"
          />
        </div>
      </div>

      <div
        id="productsContainer"
        class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-8"
      ></div>
    </main>

    <script>
      let products = []; // Initialize as an empty array
      let filteredProducts = [];
      const productsContainer = document.getElementById("productsContainer");
      const searchInput = document.getElementById("searchInput");
      const prevPageButton = document.getElementById("prevPage");
      const nextPageButton = document.getElementById("nextPage");
      const pageNumbersContainer = document.getElementById("pageNumbers");

      const productsPerPage = 12;
      let currentPage = 1;

      async function fetchProducts() {
        try {
          const response = await fetch("/products/get-products");
          const fetchedProducts = await response.json();
          return fetchedProducts;
        } catch (error) {
          console.error("Error fetching products:", error);
          return [];
        }
      }

      function displayProducts(productList, page) {
        productsContainer.innerHTML = "";
        const startIndex = (page - 1) * productsPerPage;
        const endIndex = startIndex + productsPerPage;
        const productsToDisplay = productList.slice(startIndex, endIndex);

        productsToDisplay.forEach((product) => {
          let thumbnail = product["images"][0]["cloudinaryUrl"];

          const productCard = document.createElement("div");
          productCard.className =
            "bg-white rounded-lg shadow-md p-4 min-h-[450px] max-h-[450px] cursor-pointer hover:bg-gray-100 transition-colors duration-200";
          productCard.innerHTML = `
            <div class='flex justify-center items-center min-h-1/2 max-h-1/2'>
            <img src="${thumbnail}" alt="${product.name}" 
            class="mb-4 min-h-[250px] max-h-[250px] object-contain w-full"> 
            </div>
            <h3 class="text-xl font-semibold mb-2">${product.name}</h3>
            <p class="text-gray-600 mb-2">${
              product.details && product.details.length > 100
                ? product.details.substring(0, 100) + "..."
                : product.details || ""
            }</p>
            <p class="text-green-600 font-bold">${product.price}PHP</p>
        `;
          productCard.addEventListener("click", () => {
            window.location.href = `/products/${product.id}`;
          });
          productsContainer.appendChild(productCard);
        });
      }

      function updatePaginationButtons(productList) {
        pageNumbersContainer.innerHTML = "";
        const pageCount = Math.ceil(productList.length / productsPerPage);
        for (let i = 1; i <= pageCount; i++) {
          const pageButton = document.createElement("button");
          pageButton.className = `px-3 py-1 bg-gray-200 rounded-md mr-1 ${
            currentPage === i ? "bg-cyan-500 text-white" : ""
          }`;
          pageButton.textContent = i;
          pageButton.addEventListener("click", () => {
            currentPage = i;
            displayProducts(productList, currentPage);
            updatePaginationButtons(productList);
          });
          pageNumbersContainer.appendChild(pageButton);
        }
      }

      function updatePage() {
        displayProducts(filteredProducts, currentPage);
        updatePaginationButtons(filteredProducts);
      }

      async function initializeProducts() {
        const fetchedProducts = await fetchProducts();
        products = fetchedProducts;
        filteredProducts = [...products];
        updatePage();
      }

      initializeProducts();

      searchInput.addEventListener("input", () => {
        const searchTerm = searchInput.value.toLowerCase();
        filteredProducts = products.filter((product) =>
          product.name.toLowerCase().includes(searchTerm)
        );
        currentPage = 1;
        updatePage();
      });

      prevPageButton.addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          updatePage();
        }
      });

      nextPageButton.addEventListener("click", () => {
        const pageCount = Math.ceil(filteredProducts.length / productsPerPage);
        if (currentPage < pageCount) {
          currentPage++;
          updatePage();
        }
      });

      document.addEventListener("keydown", (event) => {
        if (event.key === "/") {
          searchInput.focus();
          event.preventDefault();
        }
      });
    </script>
  </body>
</html>
