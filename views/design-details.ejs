<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Design Your T-Shirt - KAMADA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
      .info-box {
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        padding: 8px;
        border-radius: 4px;
        z-index: 10; /* Ensure it's above other elements */
        max-width: 300px; /* Limit width */
      }

      @media (max-width: 768px) {
        .info-box {
          max-width: 80%; /* Adjust for smaller screens */
        }
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <nav class="bg-white shadow-md p-4">
      <div class="container mx-auto flex justify-between items-center">
        <a href="/" class="text-lg font-semibold text-gray-800 italic-bold-logo"
          >KAMADA</a
        >
      </div>
    </nav>

    <div class="container mx-auto mt-10 p-8 bg-white rounded-lg shadow-md">
      <h1 class="text-3xl font-semibold mb-6">Design Your Custom T-Shirt</h1>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div class="order-1 lg:order-none h-[33vh] relative">
          <div class="mb-6 h-full relative">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2"
                >Upload Front Design:</label
              >
              <i
                class="ri-information-line text-gray-500 cursor-pointer info-icon"
                data-info="Upload the design you want to print at the front of the shirt (leave empty if there is none)"
              ></i>
            </div>
            <div
              id="uploadAreaFront"
              class="border-dashed border-2 border-gray-400 rounded-lg p-6 h-full cursor-pointer relative flex items-center justify-center"
            >
              <input
                type="file"
                id="designUploadFront"
                class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              />
              <div id="uploadContentFront" class="text-center">
                <i
                  class="ri-upload-cloud-2-line text-4xl text-gray-500 mb-4"
                ></i>
                <p class="text-gray-600">
                  Drag and drop your front design file here or click to upload
                </p>
              </div>
              <img
                id="uploadedImageFront"
                src="#"
                alt="Uploaded Front Image"
                class="hidden max-w-full max-h-full mx-auto"
              />
            </div>
            <div
              class="absolute bg-white border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-0 left-0 info-box"
            ></div>
          </div>
        </div>

        <div class="order-2 lg:order-none h-[33vh] relative">
          <div class="mb-6 h-full relative">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2"
                >Upload Back Design:</label
              >
              <i
                class="ri-information-line text-gray-500 cursor-pointer info-icon"
                data-info="Upload the design you want to print at the back of the shirt (leave empty if there is none)"
              ></i>
            </div>
            <div
              id="uploadAreaBack"
              class="border-dashed border-2 border-gray-400 rounded-lg p-6 h-full cursor-pointer relative flex items-center justify-center"
            >
              <input
                type="file"
                id="designUploadBack"
                class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              />
              <div id="uploadContentBack" class="text-center">
                <i
                  class="ri-upload-cloud-2-line text-4xl text-gray-500 mb-4"
                ></i>
                <p class="text-gray-600">
                  Drag and drop your back design file here or click to upload
                </p>
              </div>
              <img
                id="uploadedImageBack"
                src="#"
                alt="Uploaded Back Image"
                class="hidden max-w-full max-h-full mx-auto"
              />
            </div>
            <div
              class="absolute bg-white border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-0 left-0 info-box"
            ></div>
          </div>
        </div>

        <div class="order-3 lg:order-none h-[33vh] relative">
          <div class="mb-6 h-full relative">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2"
                >Upload Print Details:</label
              >
              <i
                class="ri-information-line text-gray-500 cursor-pointer info-icon"
                data-info="Upload the design how you want the output should look like on the shirt (if you have not created one, leave empty and you can just chat with the admin for furthur information)"
              ></i>
            </div>
            <div
              id="uploadAreaPrint"
              class="border-dashed border-2 border-gray-400 rounded-lg p-6 h-full cursor-pointer relative flex items-center justify-center"
            >
              <input
                type="file"
                id="designUploadPrint"
                class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              />
              <div id="uploadContentPrint" class="text-center">
                <i
                  class="ri-upload-cloud-2-line text-4xl text-gray-500 mb-4"
                ></i>
                <p class="text-gray-600">
                  Drag and drop your print details file here or click to upload
                </p>
              </div>
              <img
                id="uploadedImagePrint"
                src="#"
                alt="Uploaded Print Image"
                class="hidden max-w-full max-h-full mx-auto"
              />
            </div>
            <div
              class="absolute bg-white border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-0 left-0 info-box"
            ></div>
          </div>
        </div>

        <div class="order-4 lg:order-none h-[33vh] relative">
          <div class="mb-6 h-full relative">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2"
                >Design Notes:</label
              >
              <i
                class="ri-information-line text-gray-500 cursor-pointer info-icon"
                data-info="Explain how you want the design to be printed on the shirt."
              ></i>
            </div>
            <textarea
              id="designNotes"
              class="border rounded w-full h-full p-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline resize-none"
              placeholder="Add any specific instructions or notes for your design"
            ></textarea>
            <div
              class="absolute bg-white border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-0 left-0 info-box"
            ></div>
          </div>
        </div>
      </div>

      <div class="mt-12">
        <h2 class="text-2xl font-semibold mb-6 border-b pb-2">
          Specify Details
        </h2>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div class="order-5 lg:order-none">
            <h3 class="font-semibold mb-4">
              Select Size, Color, and Quantity:
            </h3>

            <div class="mb-4 flex items-center justify-between">
              <label
                for="sizeSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Size:</label
              >
              <button
                id="sizeChartButton"
                class="text-cyan-500 hover:underline text-sm"
              >
                View Size Chart
              </button>
            </div>
            <select
              id="sizeSelect"
              class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mb-4"
            >
              <option value="">Select Size</option>
              <option value="XS">XS</option>
              <option value="S">S</option>
              <option value="M">M</option>
              <option value="L">L</option>
              <option value="XL">XL</option>
              <option value="2XL">2XL</option>
              <option value="3XL">3XL</option>
              <option value="4XL">4XL</option>
            </select>

            <div class="mb-4">
              <label
                for="colorSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Color:</label
              >
              <select
                id="colorSelect"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              >
                <option value="">Select Color</option>
                <option value="white">White</option>
                <option value="black">Black</option>
                <option value="gray">Gray</option>
                <option value="red">Red</option>
                <option value="blue">Blue</option>
                <option value="green">Green</option>
                <option value="yellow">Yellow</option>
                <option value="orange">Orange</option>
              </select>
            </div>

            <div class="mb-4">
              <label
                for="quantityInput"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Quantity:</label
              >
              <input
                type="number"
                id="quantityInput"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                min="0"
                placeholder="Quantity"
              />
            </div>

            <div class="flex justify-end">
              <button
                id="addItemButton"
                class="bg-cyan-500 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              >
                Add to Order
              </button>
            </div>
          </div>

          <div class="order-6 lg:order-none">
            <h3 class="font-semibold mb-4">Order List:</h3>
            <ul
              id="orderList"
              class="border rounded p-4 h-[300px] overflow-y-auto"
            ></ul>
          </div>
        </div>

        <div class="mt-8 order-7 flex justify-end w-full">
          <div class="max-w-7xl mx-auto w-full px-4">
            <div class="flex justify-end">
              <button
                id="proceedToCheckout"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              >
                Proceed to Checkout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <footer class="bg-gray-200 py-8 text-center mt-8">
      <p class="text-gray-600">
        &copy; <%= new Date().getFullYear() %> KAMADA. All rights reserved.
      </p>
    </footer>

    <div
      id="sizeChartModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4"
    >
      <div class="bg-white rounded-lg p-6 md:p-8 w-full max-w-2xl">
        <h2 class="text-2xl font-semibold mb-4">Size Chart</h2>
        <div class="flex justify-between items-center mb-4">
          <button
            id="toggleUnitsButton"
            class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm md:text-base"
          >
            Show Inches
          </button>
          <button
            id="closeModalButton"
            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm md:text-base"
          >
            Close
          </button>
        </div>
        <div class="overflow-x-auto">
          <table id="sizeChartTable" class="w-full text-left table-auto">
            <thead>
              <tr>
                <th class="py-2 px-4 border-b">Size</th>
                <th class="py-2 px-4 border-b">Chest (cm)</th>
                <th class="py-2 px-4 border-b">Sleeve (cm)</th>
                <th class="py-2 px-4 border-b">Length (cm)</th>
                <th class="py-2 px-4 border-b">Shoulder (cm)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="py-2 px-4 border-b">XS</td>
                <td class="py-2 px-4 border-b">86</td>
                <td class="py-2 px-4 border-b">60</td>
                <td class="py-2 px-4 border-b">68</td>
                <td class="py-2 px-4 border-b">40</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">S</td>
                <td class="py-2 px-4 border-b">92</td>
                <td class="py-2 px-4 border-b">62</td>
                <td class="py-2 px-4 border-b">71</td>
                <td class="py-2 px-4 border-b">42</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">M</td>
                <td class="py-2 px-4 border-b">100</td>
                <td class="py-2 px-4 border-b">64</td>
                <td class="py-2 px-4 border-b">74</td>
                <td class="py-2 px-4 border-b">44</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">L</td>
                <td class="py-2 px-4 border-b">108</td>
                <td class="py-2 px-4 border-b">66</td>
                <td class="py-2 px-4 border-b">77</td>
                <td class="py-2 px-4 border-b">46</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">XL</td>
                <td class="py-2 px-4 border-b">116</td>
                <td class="py-2 px-4 border-b">68</td>
                <td class="py-2 px-4 border-b">80</td>
                <td class="py-2 px-4 border-b">48</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">2XL</td>
                <td class="py-2 px-4 border-b">124</td>
                <td class="py-2 px-4 border-b">70</td>
                <td class="py-2 px-4 border-b">83</td>
                <td class="py-2 px-4 border-b">50</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">3XL</td>
                <td class="py-2 px-4 border-b">132</td>
                <td class="py-2 px-4 border-b">72</td>
                <td class="py-2 px-4 border-b">86</td>
                <td class="py-2 px-4 border-b">52</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">4XL</td>
                <td class="py-2 px-4 border-b">140</td>
                <td class="py-2 px-4 border-b">74</td>
                <td class="py-2 px-4 border-b">89</td>
                <td class="py-2 px-4 border-b">54</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <script>
      // Info Icon Hover Functionality
      const infoIcons = document.querySelectorAll(".info-icon");

      infoIcons.forEach((icon) => {
        const infoBox =
          icon.parentElement.parentElement.querySelector(".info-box");
        const info = icon.dataset.info;

        icon.addEventListener("mouseenter", () => {
          showInfoBox(infoBox, info);
        });

        icon.addEventListener("mouseleave", () => {
          hideInfoBox(infoBox);
        });
      });

      // Upload Area Hover Functionality
      const uploadAreas = document.querySelectorAll("[id^='uploadArea']");

      uploadAreas.forEach((area) => {
        const infoBox =
          area.parentElement.parentElement.querySelector(".info-box");
        const infoIcon =
          area.parentElement.parentElement.querySelector(".info-icon");
        const info = infoIcon.dataset.info;

        area.addEventListener("mouseenter", () => {
          showInfoBox(infoBox, info);
        });

        area.addEventListener("mouseleave", () => {
          hideInfoBox(infoBox);
        });
      });

      // Helper Functions
      function showInfoBox(infoBox, info) {
        infoBox.textContent = info;
        infoBox.classList.remove("hidden"); // Show using Tailwind
      }

      function hideInfoBox(infoBox) {
        infoBox.classList.add("hidden"); // Hide using Tailwind
      }

      // File Upload and Drag & Drop
      // Front Upload
      const designUploadFront = document.getElementById("designUploadFront");
      const uploadAreaFront = document.getElementById("uploadAreaFront");
      const uploadContentFront = document.getElementById("uploadContentFront");
      const uploadedImageFront = document.getElementById("uploadedImageFront");

      designUploadFront.addEventListener("change", (event) => {
        handleFileUpload(event, uploadedImageFront, uploadContentFront);
      });

      uploadAreaFront.addEventListener("dragover", (event) => {
        handleDragOver(event, uploadAreaFront);
      });

      uploadAreaFront.addEventListener("dragleave", () => {
        handleDragLeave(uploadAreaFront);
      });

      uploadAreaFront.addEventListener("drop", (event) => {
        handleDrop(
          event,
          designUploadFront,
          uploadedImageFront,
          uploadContentFront
        );
      });

      // Back Upload
      const designUploadBack = document.getElementById("designUploadBack");
      const uploadAreaBack = document.getElementById("uploadAreaBack");
      const uploadContentBack = document.getElementById("uploadContentBack");
      const uploadedImageBack = document.getElementById("uploadedImageBack");

      designUploadBack.addEventListener("change", (event) => {
        handleFileUpload(event, uploadedImageBack, uploadContentBack);
      });

      uploadAreaBack.addEventListener("dragover", (event) => {
        handleDragOver(event, uploadAreaBack);
      });

      uploadAreaBack.addEventListener("dragleave", () => {
        handleDragLeave(uploadAreaBack);
      });

      uploadAreaBack.addEventListener("drop", (event) => {
        handleDrop(
          event,
          designUploadBack,
          uploadedImageBack,
          uploadContentBack
        );
      });

      // Print Upload
      const designUploadPrint = document.getElementById("designUploadPrint");
      const uploadAreaPrint = document.getElementById("uploadAreaPrint");
      const uploadContentPrint = document.getElementById("uploadContentPrint");
      const uploadedImagePrint = document.getElementById("uploadedImagePrint");

      designUploadPrint.addEventListener("change", (event) => {
        handleFileUpload(event, uploadedImagePrint, uploadContentPrint);
      });

      uploadAreaPrint.addEventListener("dragover", (event) => {
        handleDragOver(event, uploadAreaPrint);
      });

      uploadAreaPrint.addEventListener("dragleave", () => {
        handleDragLeave(uploadAreaPrint);
      });

      uploadAreaPrint.addEventListener("drop", (event) => {
        handleDrop(
          event,
          designUploadPrint,
          uploadedImagePrint,
          uploadContentPrint
        );
      });

      // Helper Functions
      function handleFileUpload(event, uploadedImage, uploadContent) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            uploadedImage.src = e.target.result;
            uploadedImage.classList.remove("hidden");
            uploadContent.classList.add("hidden");
          };
          reader.readAsDataURL(file);
        } else {
          uploadedImage.src = "#";
          uploadedImage.classList.add("hidden");
          uploadContent.classList.remove("hidden");
        }
      }

      function handleDragOver(event, uploadArea) {
        event.preventDefault();
        uploadArea.classList.add("border-blue-400");
      }

      function handleDragLeave(uploadArea) {
        uploadArea.classList.remove("border-blue-400");
      }

      function handleDrop(event, designUpload, uploadedImage, uploadContent) {
        event.preventDefault();
        designUpload.files = event.dataTransfer.files;
        designUpload.dispatchEvent(new Event("change"));
        uploadArea.classList.remove("border-blue-400");
      }

      // Order List Functionality
      const addItemButton = document.getElementById("addItemButton");
      const sizeSelect = document.getElementById("sizeSelect");
      const colorSelect = document.getElementById("colorSelect");
      const quantityInput = document.getElementById("quantityInput");
      const orderList = document.getElementById("orderList");

      quantityInput.addEventListener("input", () => {
        if (parseInt(quantityInput.value) === 0) {
          quantityInput.value = "";
        }
      });

      addItemButton.addEventListener("click", () => {
        const size = sizeSelect.value;
        const color = colorSelect.value;
        const quantity = parseInt(quantityInput.value);

        if (size && color && quantity > 0) {
          const itemKey = `${size}-${color}`; // Create a unique key for each item

          // Find if the item already exists
          const existingItem = Array.from(
            orderList.querySelectorAll("li")
          ).find((li) => {
            return li.dataset.itemKey === itemKey;
          });

          if (existingItem) {
            // Item exists, update quantity
            const currentQuantity = parseInt(
              existingItem
                .querySelector("div:first-child")
                .textContent.split("Quantity: ")[1]
            );
            const newQuantity = currentQuantity + quantity;
            existingItem.querySelector(
              "div:first-child"
            ).textContent = `${size} - ${color} - Quantity: ${newQuantity}`;
          } else {
            // Item does not exist, add new item
            const listItem = document.createElement("li");
            listItem.dataset.itemKey = itemKey; // Store the item key
            listItem.classList.add(
              "border",
              "rounded",
              "p-4",
              "mb-2",
              "flex",
              "items-center",
              "justify-between"
            );
            listItem.innerHTML = `
        <div>
          ${size} - ${color} - Quantity: ${quantity}
        </div>
        <div>
          <button class="text-blue-500 hover:underline mr-2 edit-item">Edit</button>
          <button class="text-red-500 hover:underline delete-item">Delete</button>
        </div>
      `;
            orderList.appendChild(listItem);

            // Delete Item Functionality
            const deleteButtons = listItem.querySelectorAll(".delete-item");
            deleteButtons.forEach((button) => {
              button.addEventListener("click", () => {
                listItem.remove();
              });
            });

            // Edit Item Functionality
            const editButtons = listItem.querySelectorAll(".edit-item");
            editButtons.forEach((button) => {
              button.addEventListener("click", () => {
                // Populate input fields with item data
                const itemText =
                  listItem.querySelector("div:first-child").textContent;
                const itemParts = itemText.split(" - "); // Split by " - "
                const itemSize = itemParts[0].trim(); // Size is the first part, trimmed
                const itemColor = itemParts[1].trim(); // Color is the second part, trimmed
                const itemQuantity = parseInt(
                  itemParts[2].split("Quantity: ")[1]
                ); // Quantity is the third part

                sizeSelect.value = itemSize;
                colorSelect.value = itemColor;
                quantityInput.value = itemQuantity;

                // Remove the item from the list
                listItem.remove();
              });
            });
          }

          // Clear the input fields after adding to the list
          sizeSelect.value = "";
          colorSelect.value = "";
          quantityInput.value = "";
        }
      });

      // Size Chart Modal
      const sizeChartButton = document.getElementById("sizeChartButton");
      const sizeChartModal = document.getElementById("sizeChartModal");
      const closeModalButton = document.getElementById("closeModalButton");
      const toggleUnitsButton = document.getElementById("toggleUnitsButton");
      const sizeChartTable = document.getElementById("sizeChartTable");
      const body = document.querySelector("body"); // Get the body element

      let isCm = true; // Track measurement units

      sizeChartButton.addEventListener("click", () => {
        sizeChartModal.classList.remove("hidden");
        body.classList.add("overflow-hidden"); // Disable scrolling
      });

      closeModalButton.addEventListener("click", () => {
        sizeChartModal.classList.add("hidden");
        body.classList.remove("overflow-hidden"); // Enable scrolling
      });

      window.addEventListener("click", (event) => {
        if (event.target === sizeChartModal) {
          sizeChartModal.classList.add("hidden");
          body.classList.remove("overflow-hidden"); // Enable scrolling
        }
      });

      toggleUnitsButton.addEventListener("click", () => {
        const headerCells = sizeChartTable.querySelectorAll("thead th");
        if (isCm) {
          // Convert cm to inches
          const rows = sizeChartTable.querySelectorAll("tbody tr");
          rows.forEach((row) => {
            const cells = row.querySelectorAll("td");
            for (let i = 1; i < cells.length; i++) {
              const cmValue = parseFloat(cells[i].textContent);
              const inchValue = (cmValue / 2.54).toFixed(1);
              cells[i].textContent = inchValue;
            }
          });
          headerCells.forEach((cell, index) => {
            if (index > 0) {
              cell.textContent = cell.textContent.replace("(cm)", "(inches)");
            }
          });
          toggleUnitsButton.textContent = "Show Centimeters";
        } else {
          // Convert inches back to cm
          const rows = sizeChartTable.querySelectorAll("tbody tr");
          rows.forEach((row) => {
            const cells = row.querySelectorAll("td");
            for (let i = 1; i < cells.length; i++) {
              const inchValue = parseFloat(cells[i].textContent);
              const cmValue = (inchValue * 2.54).toFixed(0);
              cells[i].textContent = cmValue;
            }
          });
          headerCells.forEach((cell, index) => {
            if (index > 0) {
              cell.textContent = cell.textContent.replace("(inches)", "(cm)");
            }
          });
          toggleUnitsButton.textContent = "Show Inches";
        }
        isCm = !isCm;
      });

      // Checkout functionality
      const proceedToCheckoutButton =
        document.getElementById("proceedToCheckout");

      proceedToCheckoutButton.addEventListener("click", () => {
        // Add your checkout logic here
        alert("Proceed to Checkout clicked!");
        // Example: Redirect to checkout page
        // window.location.href = "/checkout";
      });
    </script>
  </body>
</html>
