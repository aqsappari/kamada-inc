<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Design Your T-Shirt - KAMADA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
      .info-box {
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        padding: 8px;
        border-radius: 4px;
        z-index: 10; /* Ensure it's above other elements */
        max-width: 300px; /* Limit width */
      }

      @media (max-width: 768px) {
        .info-box {
          max-width: 80%; /* Adjust for smaller screens */
        }
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <nav class="bg-white shadow-md p-4">
      <div class="container mx-auto flex justify-between items-center">
        <a href="/" class="text-lg font-semibold text-gray-800 italic-bold-logo"
          >KAMADA</a
        >
      </div>
    </nav>

    <div class="container mx-auto mt-10 p-8 bg-white rounded-lg shadow-md">
      <h1 class="text-3xl font-semibold mb-6">Design Your Custom T-Shirt</h1>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div class="order-1 lg:order-none relative h-[33vh]">
          <div class="mb-6 h-full">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2">
                Upload your design prints:
              </label>
              <div class="flex items-center">
                <i
                  class="ri-information-line text-gray-500 cursor-pointer info-icon mr-2"
                  data-info="Upload all design files you want to print on the shirt, including front, back, and any other details."
                ></i>
                <button
                  id="addFilesButton"
                  class="flex items-center bg-cyan-500 text-white hover:text-cyan-500 hover:bg-slate-200 px-2 rounded gap-2"
                >
                  <i class="ri-add-line font-bold"></i>
                  <span class="hidden lg:inline font-medium">Add Files</span>
                </button>
              </div>
            </div>
            <input
              type="file"
              id="designUploadPrints"
              class="hidden"
              multiple
            />
            <div
              id="uploadedFilesList"
              class="border border-gray-400 rounded-lg p-4 relative h-full overflow-y-auto"
            ></div>
            <div
              class="absolute bg-blue-100 border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-7 right-0 info-box"
            ></div>
          </div>
        </div>

        <div class="order-2 lg:order-none relative h-[33vh]">
          <div class="mb-6 h-full">
            <div class="flex items-center justify-between">
              <label class="block text-gray-700 text-sm font-bold mb-2">
                Design Notes:
              </label>
              <i
                class="ri-information-line text-gray-500 cursor-pointer info-icon"
                data-info="Explain how you want the design to be printed on the shirt."
              ></i>
            </div>
            <textarea
              id="designNotes"
              class="border rounded w-full h-full p-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline resize-none"
              placeholder="Add any specific instructions or notes for your design"
            ></textarea>
            <div
              class="absolute bg-blue-100 border border-gray-300 rounded p-2 text-sm z-10 hidden w-full top-7 right-0 info-box"
            ></div>
          </div>
        </div>
      </div>

      <div class="mt-12">
        <h2 class="text-2xl font-semibold mb-6 border-b pb-2">
          Specify Details
        </h2>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div class="order-5 lg:order-none flex flex-col">
            <h3 class="font-semibold mb-4 flex justify-between items-center">
              Select Garment Details:
              <button
                id="priceChartButton"
                class="text-cyan-500 hover:underline text-sm"
              >
                View Price Chart
              </button>
            </h3>

            <div class="mb-4">
              <label
                for="garmentTypeSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Type of Garment:</label
              >
              <select
                id="garmentTypeSelect"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              >
                <option value="" class="text-slate-400">
                  - - Select Garment Type - -
                </option>
                <option value="Classic" class="text-gray-700">
                  Classic T-Shirt
                </option>
                <option value="V-Neck" class="text-gray-700">
                  V-Neck T-Shirt
                </option>
                <option value="Polo" class="text-gray-700">Polo Shirt</option>
                <option value="Hoodie" class="text-gray-700">Hoodie</option>
                <option value="Zip-Up" class="text-gray-700">
                  Zip-Up Hoodie
                </option>
                <option value="Sweater" class="text-gray-700">Sweater</option>
                <option value="Long Sleeve" class="text-gray-700">
                  Long Sleeve T-Shirt
                </option>
                <option value="Crewneck" class="text-gray-700">
                  Crewneck Sweatshirt
                </option>
                <option value="Jacket" class="text-gray-700">Jacket</option>
              </select>
            </div>

            <div class="mb-4">
              <label
                for="fabricsSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Fabrics:</label
              >
              <select
                id="fabricsSelect"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                disabled
              >
                <option value="" class="text-slate-400">
                  - - Select Fabrics - -
                </option>
              </select>
            </div>

            <div class="mb-4 flex items-center justify-between">
              <label
                for="sizeSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Size:</label
              >
              <button
                id="sizeChartButton"
                class="text-cyan-500 hover:underline text-sm"
              >
                View Size Chart
              </button>
            </div>
            <select
              id="sizeSelect"
              class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mb-4"
            >
              <option value="" class="text-slate-400">
                - - Select Size - -
              </option>
              <option value="XS" class="text-gray-700">XS</option>
              <option value="S" class="text-gray-700">S</option>
              <option value="M" class="text-gray-700">M</option>
              <option value="L" class="text-gray-700">L</option>
              <option value="XL" class="text-gray-700">XL</option>
              <option value="2XL" class="text-gray-700">2XL</option>
              <option value="3XL" class="text-gray-700">3XL</option>
              <option value="4XL" class="text-gray-700">4XL</option>
            </select>

            <div class="mb-4">
              <label
                for="colorSelect"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Color:</label
              >
              <select
                id="colorSelect"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              >
                <option value="" class="text-slate-400">
                  - - Select Color - -
                </option>
                <option value="white" class="text-gray-700">White</option>
                <option value="black" class="text-gray-700">Black</option>
                <option value="gray" class="text-gray-700">Gray</option>
                <option value="red" class="text-gray-700">Red</option>
                <option value="blue" class="text-gray-700">Blue</option>
                <option value="green" class="text-gray-700">Green</option>
                <option value="yellow" class="text-gray-700">Yellow</option>
                <option value="orange" class="text-gray-700">Orange</option>
              </select>
            </div>

            <div class="mb-4">
              <label
                for="quantityInput"
                class="block text-gray-700 text-sm font-bold mb-2"
                >Quantity:</label
              >
              <input
                type="number"
                id="quantityInput"
                class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                min="0"
                placeholder="Quantity"
                oninput="this.value = this.value.replace(/[^0-9]/g, ''); if (this.value.length > 1 && this.value.startsWith('0')) { this.value = this.value.substring(1); }"
                onpaste="event.clipboardData && /[^0-9]/g.test(event.clipboardData.getData('text')) && event.preventDefault();"
              />
            </div>

            <div class="flex justify-end mt-auto">
              <button
                id="addItemButton"
                class="bg-cyan-500 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              >
                Add to Order
              </button>
            </div>
          </div>

          <div class="order-6 lg:order-none flex flex-col">
            <h3 class="font-semibold mb-4">Order List:</h3>
            <ul
              id="orderList"
              class="border rounded p-4 flex-grow overflow-y-auto"
            ></ul>
          </div>
        </div>

        <div
          id="priceChartModal"
          class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden"
        >
          <div class="bg-white rounded-lg p-6 w-full max-w-4xl">
            <h2 class="text-2xl font-semibold mb-4">Price Chart</h2>

            <select
              id="priceChartGarmentSelect"
              class="border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mb-4"
            >
              <option value="Classic">Classic T-Shirt</option>
              <option value="V-Neck">V-Neck T-Shirt</option>
              <option value="Polo">Polo Shirt</option>
              <option value="Hoodie">Hoodie</option>
              <option value="Zip-Up">Zip-Up Hoodie</option>
              <option value="Sweater">Sweater</option>
              <option value="Long Sleeve">Long Sleeve T-Shirt</option>
              <option value="Crewneck">Crewneck Sweatshirt</option>
              <option value="Jacket">Jacket</option>
            </select>

            <div id="priceChartTableContainer" class="overflow-x-auto">
              <table
                id="priceChartTable"
                class="min-w-full border-collapse border border-gray-400"
              >
                <thead>
                  <tr>
                    <th class="border border-gray-400 p-2">Fabric</th>
                    <th class="border border-gray-400 p-2">XS</th>
                    <th class="border border-gray-400 p-2">S</th>
                    <th class="border border-gray-400 p-2">M</th>
                    <th class="border border-gray-400 p-2">L</th>
                    <th class="border border-gray-400 p-2">XL</th>
                    <th class="border border-gray-400 p-2">2XL</th>
                    <th class="border border-gray-400 p-2">3XL</th>
                    <th class="border border-gray-400 p-2">4XL</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>

            <div class="flex justify-end mt-4">
              <button
                id="closePriceChartModal"
                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <footer class="bg-gray-200 py-8 text-center mt-8">
      <p class="text-gray-600">
        &copy; <%= new Date().getFullYear() %> KAMADA. All rights reserved.
      </p>
    </footer>

    <div
      id="sizeChartModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4"
    >
      <div class="bg-white rounded-lg p-6 md:p-8 w-full max-w-2xl">
        <h2 class="text-2xl font-semibold mb-4">Size Chart</h2>
        <div class="flex justify-between items-center mb-4">
          <button
            id="toggleUnitsButton"
            class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm md:text-base"
          >
            Show Inches
          </button>
          <button
            id="closeModalButton"
            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm md:text-base"
          >
            Close
          </button>
        </div>
        <div class="overflow-x-auto">
          <table id="sizeChartTable" class="w-full text-left table-auto">
            <thead>
              <tr>
                <th class="py-2 px-4 border-b">Size</th>
                <th class="py-2 px-4 border-b">Chest (cm)</th>
                <th class="py-2 px-4 border-b">Sleeve (cm)</th>
                <th class="py-2 px-4 border-b">Length (cm)</th>
                <th class="py-2 px-4 border-b">Shoulder (cm)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="py-2 px-4 border-b">XS</td>
                <td class="py-2 px-4 border-b">86</td>
                <td class="py-2 px-4 border-b">60</td>
                <td class="py-2 px-4 border-b">68</td>
                <td class="py-2 px-4 border-b">40</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">S</td>
                <td class="py-2 px-4 border-b">92</td>
                <td class="py-2 px-4 border-b">62</td>
                <td class="py-2 px-4 border-b">71</td>
                <td class="py-2 px-4 border-b">42</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">M</td>
                <td class="py-2 px-4 border-b">100</td>
                <td class="py-2 px-4 border-b">64</td>
                <td class="py-2 px-4 border-b">74</td>
                <td class="py-2 px-4 border-b">44</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">L</td>
                <td class="py-2 px-4 border-b">108</td>
                <td class="py-2 px-4 border-b">66</td>
                <td class="py-2 px-4 border-b">77</td>
                <td class="py-2 px-4 border-b">46</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">XL</td>
                <td class="py-2 px-4 border-b">116</td>
                <td class="py-2 px-4 border-b">68</td>
                <td class="py-2 px-4 border-b">80</td>
                <td class="py-2 px-4 border-b">48</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">2XL</td>
                <td class="py-2 px-4 border-b">124</td>
                <td class="py-2 px-4 border-b">70</td>
                <td class="py-2 px-4 border-b">83</td>
                <td class="py-2 px-4 border-b">50</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">3XL</td>
                <td class="py-2 px-4 border-b">132</td>
                <td class="py-2 px-4 border-b">72</td>
                <td class="py-2 px-4 border-b">86</td>
                <td class="py-2 px-4 border-b">52</td>
              </tr>
              <tr>
                <td class="py-2 px-4 border-b">4XL</td>
                <td class="py-2 px-4 border-b">140</td>
                <td class="py-2 px-4 border-b">74</td>
                <td class="py-2 px-4 border-b">89</td>
                <td class="py-2 px-4 border-b">54</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div
      class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 hidden"
      id="customModal"
    >
      <div
        class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-lg p-6 w-96"
      >
        <h2 class="text-lg font-semibold mb-4">Error</h2>
        <p id="modalMessage" class="mb-4 text-gray-700"></p>
        <button
          id="modalCloseButton"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Close
        </button>
      </div>
    </div>

    <script>
      const designUploadPrints = document.getElementById("designUploadPrints");
      const uploadedFilesList = document.getElementById("uploadedFilesList");
      const addFilesButton = document.getElementById("addFilesButton");
      const infoIcons = document.querySelectorAll(".info-icon");
      const infoBoxes = document.querySelectorAll(".info-box");

      let filesArray = [];

      // Info Box Functionality
      infoIcons.forEach((icon, index) => {
        icon.addEventListener("mouseover", (event) => {
          const infoText = icon.getAttribute("data-info");
          infoBoxes[index].textContent = infoText;
          infoBoxes[index].classList.remove("hidden");
        });

        icon.addEventListener("mouseout", () => {
          infoBoxes[index].classList.add("hidden");
        });
      });

      // Upload Prints Functionality
      addFilesButton.addEventListener("click", () => {
        designUploadPrints.click();
      });

      designUploadPrints.addEventListener("change", (event) => {
        handleFileUpload(event.target.files);
      });

      function handleFileUpload(files) {
        if (files && files.length > 0) {
          Array.from(files).forEach((file) => {
            filesArray.push(file);
          });
          renderFiles();
        }
      }

      function renderFiles() {
        uploadedFilesList.innerHTML = "";
        filesArray.forEach((file, index) => {
          const fileCard = createFileCard(file, index);
          uploadedFilesList.appendChild(fileCard);
        });
      }

      function createFileCard(file, index) {
        const fileCard = document.createElement("div");
        fileCard.classList.add(
          "flex",
          "items-center",
          "justify-between",
          "p-4",
          "border",
          "rounded-lg",
          "mb-2"
        );

        const fileExtension = file.name.split(".").pop().toUpperCase();
        const fileName =
          file.name.length > 20
            ? file.name.substring(0, 20) + "..."
            : file.name;
        const fileSize = (file.size / 1024).toFixed(2) + " KB";

        const extensionColor = getExtensionColor(fileExtension);

        fileCard.innerHTML = `
            <div class="flex items-center">
                <div class="w-16 h-10 rounded-lg flex items-center justify-center text-white mr-4 font-medium" style="background-color: ${extensionColor};">${fileExtension}</div>
                <div>
                    <p>${fileName}</p>
                    <p class="text-xs text-gray-500">${fileSize}</p>
                </div>
            </div>
            <i class="ri-delete-bin-line cursor-pointer text-red-500" data-index="${index}"></i>
        `;

        fileCard
          .querySelector(".ri-delete-bin-line")
          .addEventListener("click", (event) => {
            removeFile(index);
          });

        return fileCard;
      }

      function getExtensionColor(extension) {
        const colors = {
          PSD: "#29ABE2",
          AI: "#FF7300",
          EPS: "#800080",
          SVG: "#E91E63",
          PDF: "#FF6347",
          PNG: "#90EE90",
          JPG: "#FFA07A",
          JPEG: "#FFA07A",
          GIF: "#DDA0DD",
          TIFF: "#00CED1",
          TIF: "#00CED1",
          BMP: "#A9A9A9",
          RAW: "#8B4513",
          CR2: "#8B4513",
          NEF: "#8B4513",
          DNG: "#8B4513",
          DOC: "#4682B4",
          DOCX: "#4682B4",
          TXT: "#20B2AA",
          ZIP: "#FFD700",
          RAR: "#FFD700",
          CSV: "#778899",
        };
        return colors[extension] || "#808080";
      }

      function removeFile(index) {
        filesArray.splice(index, 1);
        renderFiles();
      }

      // Garment and Fabric selection
      const garmentTypeSelect = document.getElementById("garmentTypeSelect");
      const fabricsSelect = document.getElementById("fabricsSelect");
      const sizeSelect = document.getElementById("sizeSelect");
      const colorSelect = document.getElementById("colorSelect");

      const priceChartButton = document.getElementById("priceChartButton");
      const priceChartModal = document.getElementById("priceChartModal");
      const closePriceChartModal = document.getElementById(
        "closePriceChartModal"
      );
      const priceChartGarmentSelect = document.getElementById(
        "priceChartGarmentSelect"
      );
      const priceChartTableBody = document.querySelector(
        "#priceChartTable tbody"
      );

      const fabricOptions = {
        Classic: ["Cotton", "Polyester", "Blend"],
        "V-Neck": ["Cotton", "Blend"],
        Polo: ["Pique Cotton", "Cotton-Polyester Blend"],
        Hoodie: ["Fleece", "Cotton", "Blend"],
        "Zip-Up": ["Fleece", "Cotton", "Blend"],
        Sweater: ["Wool", "Cotton", "Synthetic Knit"],
        "Long Sleeve": ["Cotton", "Blend"],
        Crewneck: ["Fleece", "Cotton", "Blend"],
        Jacket: ["Denim", "Leather", "Nylon", "Synthetic Blend"],
      };

      const prices = {
        Classic: {
          Cotton: {
            XS: 10,
            S: 11,
            M: 12,
            L: 13,
            XL: 14,
            "2XL": 15,
            "3XL": 16,
            "4XL": 17,
          },
          Polyester: {
            XS: 12,
            S: 13,
            M: 14,
            L: 15,
            XL: 16,
            "2XL": 17,
            "3XL": 18,
            "4XL": 19,
          },
          Blend: {
            XS: 11,
            S: 12,
            M: 13,
            L: 14,
            XL: 15,
            "2XL": 16,
            "3XL": 17,
            "4XL": 18,
          },
        },
        "V-Neck": {
          Cotton: {
            XS: 12,
            S: 13,
            M: 14,
            L: 15,
            XL: 16,
            "2XL": 17,
            "3XL": 18,
            "4XL": 19,
          },
          Blend: {
            XS: 13,
            S: 14,
            M: 15,
            L: 16,
            XL: 17,
            "2XL": 18,
            "3XL": 19,
            "4XL": 20,
          },
        },
        Polo: {
          "Pique Cotton": {
            XS: 15,
            S: 16,
            M: 17,
            L: 18,
            XL: 19,
            "2XL": 20,
            "3XL": 21,
            "4XL": 22,
          },
          "Cotton-Polyester Blend": {
            XS: 16,
            S: 17,
            M: 18,
            L: 19,
            XL: 20,
            "2XL": 21,
            "3XL": 22,
            "4XL": 23,
          },
        },
        Hoodie: {
          Fleece: {
            XS: 25,
            S: 26,
            M: 27,
            L: 28,
            XL: 29,
            "2XL": 30,
            "3XL": 31,
            "4XL": 32,
          },
          Cotton: {
            XS: 23,
            S: 24,
            M: 25,
            L: 26,
            XL: 27,
            "2XL": 28,
            "3XL": 29,
            "4XL": 30,
          },
          Blend: {
            XS: 24,
            S: 25,
            M: 26,
            L: 27,
            XL: 28,
            "2XL": 29,
            "3XL": 30,
            "4XL": 31,
          },
        },
        "Zip-Up": {
          Fleece: {
            XS: 28,
            S: 29,
            M: 30,
            L: 31,
            XL: 32,
            "2XL": 33,
            "3XL": 34,
            "4XL": 35,
          },
          Cotton: {
            XS: 26,
            S: 27,
            M: 28,
            L: 29,
            XL: 30,
            "2XL": 31,
            "3XL": 32,
            "4XL": 33,
          },
          Blend: {
            XS: 27,
            S: 28,
            M: 29,
            L: 30,
            XL: 31,
            "2XL": 32,
            "3XL": 33,
            "4XL": 34,
          },
        },
        Sweater: {
          Wool: {
            XS: 30,
            S: 31,
            M: 32,
            L: 33,
            XL: 34,
            "2XL": 35,
            "3XL": 36,
            "4XL": 37,
          },
          Cotton: {
            XS: 28,
            S: 29,
            M: 30,
            L: 31,
            XL: 32,
            "2XL": 33,
            "3XL": 34,
            "4XL": 35,
          },
          "Synthetic Knit": {
            XS: 29,
            S: 30,
            M: 31,
            L: 32,
            XL: 33,
            "2XL": 34,
            "3XL": 35,
            "4XL": 36,
          },
        },
        "Long Sleeve": {
          Cotton: {
            XS: 13,
            S: 14,
            M: 15,
            L: 16,
            XL: 17,
            "2XL": 18,
            "3XL": 19,
            "4XL": 20,
          },
          Blend: {
            XS: 14,
            S: 15,
            M: 16,
            L: 17,
            XL: 18,
            "2XL": 19,
            "3XL": 20,
            "4XL": 21,
          },
        },
        Crewneck: {
          Fleece: {
            XS: 26,
            S: 27,
            M: 28,
            L: 29,
            XL: 30,
            "2XL": 31,
            "3XL": 32,
            "4XL": 33,
          },
          Cotton: {
            XS: 24,
            S: 25,
            M: 26,
            L: 27,
            XL: 28,
            "2XL": 29,
            "3XL": 30,
            "4XL": 31,
          },
          Blend: {
            XS: 25,
            S: 26,
            M: 27,
            L: 28,
            XL: 29,
            "2XL": 30,
            "3XL": 31,
            "4XL": 32,
          },
        },
        Jacket: {
          Denim: {
            XS: 40,
            S: 41,
            M: 42,
            L: 43,
            XL: 44,
            "2XL": 45,
            "3XL": 46,
            "4XL": 47,
          },
          Leather: {
            XS: 60,
            S: 62,
            M: 64,
            L: 66,
            XL: 68,
            "2XL": 70,
            "3XL": 72,
            "4XL": 74,
          },
          Nylon: {
            XS: 35,
            S: 36,
            M: 37,
            L: 38,
            XL: 39,
            "2XL": 40,
            "3XL": 41,
            "4XL": 42,
          },
          "Synthetic Blend": {
            XS: 38,
            S: 39,
            M: 40,
            L: 41,
            XL: 42,
            "2XL": 43,
            "3XL": 44,
            "4XL": 45,
          },
        },
      };

      function updateSelectColor(selectElement) {
        if (selectElement.value === "") {
          selectElement.classList.add("text-slate-400");
        } else {
          selectElement.classList.remove("text-slate-400");
        }
      }

      function updatePriceTable(garmentType) {
        priceChartTableBody.innerHTML = "";
        const garmentPrices = prices[garmentType];

        if (garmentPrices) {
          Object.keys(garmentPrices).forEach((fabric) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                    <td class="border border-gray-400 p-2">${fabric}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric].XS}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric].S}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric].M}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric].L}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric].XL}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric]["2XL"]}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric]["3XL"]}</td>
                    <td class="border border-gray-400 p-2">${garmentPrices[fabric]["4XL"]}</td>
                `;
            priceChartTableBody.appendChild(row);
          });
        }
      }

      garmentTypeSelect.addEventListener("change", () => {
        const selectedGarment = garmentTypeSelect.value;
        fabricsSelect.innerHTML =
          '<option value="" class="text-slate-400"> - - Select Fabrics - - </option>';

        if (selectedGarment) {
          fabricsSelect.disabled = false;
          if (fabricOptions[selectedGarment]) {
            fabricOptions[selectedGarment].forEach((fabric) => {
              const option = document.createElement("option");
              option.value = fabric;
              option.textContent = fabric;
              fabricsSelect.appendChild(option);
            });
          }
        } else {
          fabricsSelect.disabled = true;
        }
        updateSelectColor(garmentTypeSelect);
      });

      fabricsSelect.addEventListener("change", () => {
        updateSelectColor(fabricsSelect);
      });

      sizeSelect.addEventListener("change", () => {
        updateSelectColor(sizeSelect);
      });

      colorSelect.addEventListener("change", () => {
        updateSelectColor(colorSelect);
      });

      priceChartButton.addEventListener("click", () => {
        priceChartModal.classList.remove("hidden");
        updatePriceTable(priceChartGarmentSelect.value);
        document.body.style.overflow = "hidden"; // Prevent scrolling
      });

      closePriceChartModal.addEventListener("click", () => {
        priceChartModal.classList.add("hidden");
        document.body.style.overflow = ""; // Restore scrolling
      });

      priceChartGarmentSelect.addEventListener("change", () => {
        updatePriceTable(priceChartGarmentSelect.value);
      });

      // Close modal on click outside
      window.addEventListener("click", (event) => {
        if (event.target === priceChartModal) {
          priceChartModal.classList.add("hidden");
          document.body.style.overflow = ""; // Restore scrolling
        }
      });

      // Initialize select colors on page load
      updateSelectColor(garmentTypeSelect);
      updateSelectColor(fabricsSelect);
      updateSelectColor(sizeSelect);
      updateSelectColor(colorSelect);

      // Size Chart Modal
      const sizeChartButton = document.getElementById("sizeChartButton");
      const sizeChartModal = document.getElementById("sizeChartModal");
      const closeModalButton = document.getElementById("closeModalButton");
      const toggleUnitsButton = document.getElementById("toggleUnitsButton");
      const sizeChartTable = document.getElementById("sizeChartTable");

      let isCm = true; // Track measurement units

      sizeChartButton.addEventListener("click", () => {
        sizeChartModal.classList.remove("hidden");
        body.classList.add("overflow-hidden"); // Disable scrolling
      });

      closeModalButton.addEventListener("click", () => {
        sizeChartModal.classList.add("hidden");
        body.classList.remove("overflow-hidden"); // Enable scrolling
      });

      window.addEventListener("click", (event) => {
        if (event.target === sizeChartModal) {
          sizeChartModal.classList.add("hidden");
          body.classList.remove("overflow-hidden"); // Enable scrolling
        }
      });

      toggleUnitsButton.addEventListener("click", () => {
        const headerCells = sizeChartTable.querySelectorAll("thead th");
        if (isCm) {
          // Convert cm to inches
          const rows = sizeChartTable.querySelectorAll("tbody tr");
          rows.forEach((row) => {
            const cells = row.querySelectorAll("td");
            for (let i = 1; i < cells.length; i++) {
              const cmValue = parseFloat(cells[i].textContent);
              const inchValue = (cmValue / 2.54).toFixed(1);
              cells[i].textContent = inchValue;
            }
          });
          headerCells.forEach((cell, index) => {
            if (index > 0) {
              cell.textContent = cell.textContent.replace("(cm)", "(inches)");
            }
          });
          toggleUnitsButton.textContent = "Show Centimeters";
        } else {
          // Convert inches back to cm
          const rows = sizeChartTable.querySelectorAll("tbody tr");
          rows.forEach((row) => {
            const cells = row.querySelectorAll("td");
            for (let i = 1; i < cells.length; i++) {
              const inchValue = parseFloat(cells[i].textContent);
              const cmValue = (inchValue * 2.54).toFixed(0);
              cells[i].textContent = cmValue;
            }
          });
          headerCells.forEach((cell, index) => {
            if (index > 0) {
              cell.textContent = cell.textContent.replace("(inches)", "(cm)");
            }
          });
          toggleUnitsButton.textContent = "Show Inches";
        }
        isCm = !isCm;
      });

      // Order List Functionality
      const addItemButton = document.getElementById("addItemButton");
      const quantityInput = document.getElementById("quantityInput");
      const orderList = document.getElementById("orderList");

      quantityInput.addEventListener("input", () => {
        if (parseInt(quantityInput.value) === 0) {
          quantityInput.value = "";
        }
      });

      addItemButton.addEventListener("click", () => {
        const garment = garmentTypeSelect.value;
        const size = sizeSelect.value;
        const color = colorSelect.value;
        const fabrics = fabricsSelect.value;
        const quantity = parseInt(quantityInput.value);

        if (garment && size && color && fabrics && quantity > 0) {
          const itemKey = `${garment}-${size}-${color}-${fabrics}`; // Create a unique key for each item

          // Find if the item already exists
          const existingItem = Array.from(
            orderList.querySelectorAll("li")
          ).find((li) => {
            return li.dataset.itemKey === itemKey;
          });

          if (existingItem) {
            // Item exists, update quantity
            const currentQuantity = parseInt(
              existingItem.querySelector(".quantity").textContent.split(": ")[1]
            );
            const newQuantity = currentQuantity + quantity;
            existingItem.querySelector(
              ".quantity"
            ).textContent = `Quantity: ${newQuantity}`;
          } else {
            // Item does not exist, add new item
            const listItem = document.createElement("li");
            listItem.dataset.itemKey = itemKey; // Store the item key
            listItem.classList.add(
              "flex",
              "items-center",
              "justify-between",
              "mb-2",
              "p-4",
              "border",
              "rounded"
            );
            listItem.innerHTML = `
                <div class="flex items-center">
                    <div class="shadow-md rounded-full w-10 h-10 flex items-center justify-center mr-4" style="background-color: ${color}; color: white;">
                        ${size}
                    </div>
                    <div>
                        <div class="text-xs text-gray-500">${fabrics}</div>
                        <div>${garment}</div>
                        <div class="text-xs text-gray-700">Color: ${color}, <span class="quantity">Quantity: ${quantity}</span></div>
                    </div>
                </div>
                <div>
                    <button class="text-blue-500 hover:underline mr-2 edit-item">Edit</button>
                    <button class="text-red-500 hover:underline delete-item">Delete</button>
                </div>
            `;
            orderList.appendChild(listItem);

            // Delete Item Functionality
            const deleteButtons = listItem.querySelectorAll(".delete-item");
            deleteButtons.forEach((button) => {
              button.addEventListener("click", () => {
                listItem.remove();
              });
            });

            // Edit Item Functionality
            const editButtons = listItem.querySelectorAll(".edit-item");
            editButtons.forEach((button) => {
              button.addEventListener("click", () => {
                // Populate input fields with item data
                const itemText = listItem.querySelector(
                  "div:nth-child(1) div:nth-child(2)"
                ).textContent;
                const itemParts = itemText
                  .split("Color: ")[0]
                  .split("\n")
                  .map((part) => part.trim());
                const itemGarment = itemParts[0];
                const itemFabrics = listItem.querySelector(
                  "div:nth-child(1) div:nth-child(1)"
                ).textContent;
                const itemColor = listItem
                  .querySelector("div:nth-child(1) div:nth-child(3)")
                  .textContent.split("Color: ")[1]
                  .split(",")[0];
                const itemQuantity = parseInt(
                  listItem
                    .querySelector("div:nth-child(1) div:nth-child(3)")
                    .textContent.split("Quantity: ")[1]
                );

                garmentTypeSelect.value = itemGarment;
                sizeSelect.value = size;
                colorSelect.value = itemColor;
                fabricsSelect.value = itemFabrics;
                quantityInput.value = itemQuantity;

                // Remove the item from the list
                listItem.remove();
              });
            });
          }
          // Clear the input fields after adding to the list
          garmentTypeSelect.value = "";
          sizeSelect.value = "";
          colorSelect.value = "";
          fabricsSelect.value = "";
          quantityInput.value = "";
          updateSelectColor(garmentTypeSelect);
          updateSelectColor(fabricsSelect);
          updateSelectColor(sizeSelect);
          updateSelectColor(colorSelect);
        }
      });

      // Checkout functionality
      const proceedToCheckoutButton =
        document.getElementById("proceedToCheckout");
      const modal = document.getElementById("customModal");
      const modalMessage = document.getElementById("modalMessage");
      const modalCloseButton = document.getElementById("modalCloseButton");
      const body = document.querySelector("body");

      // Function to show the modal
      function showModal(message) {
        modalMessage.textContent = message;
        modal.classList.remove("hidden"); //show
        body.classList.add("overflow-hidden");
      }

      // Function to hide the modal
      function hideModal() {
        modal.classList.add("hidden"); //hide
        body.classList.remove("overflow-hidden");
      }

      // Event listener for the modal close button
      modalCloseButton.addEventListener("click", hideModal);

      // Event listener for clicking outside the modal to close it
      window.addEventListener("click", (event) => {
        if (event.target === modal) {
          hideModal();
        }
      });

      proceedToCheckoutButton.addEventListener("click", () => {
        // 1. Read uploaded images
        const frontDesignImage = uploadedImageFront.src;
        const backDesignImage = uploadedImageBack.src;
        const printDetailsImage = uploadedImagePrint.src;

        const defaultImageSrc = window.location.href + "#";

        // 2. Validate front and back design
        if (
          frontDesignImage === defaultImageSrc &&
          backDesignImage === defaultImageSrc
        ) {
          showModal(
            "Please upload at least a front or back design image before proceeding to checkout."
          );
          return;
        }

        // 3. Get print details
        const printDetails =
          printDetailsImage !== defaultImageSrc ? printDetailsImage : null; // No validation needed, get the value

        // 4. Validate design notes and order list
        const designNotes = document.getElementById("designNotes").value;
        const orderItems = [];
        Array.from(orderList.querySelectorAll("li")).forEach((listItem) => {
          const itemText =
            listItem.querySelector("div:first-child").textContent;
          orderItems.push(itemText);
        });

        if (orderItems.length === 0) {
          showModal(
            "Please add at least one item to your order before proceeding to checkout."
          );
          return;
        }

        // 5. Store data in sessionStorage
        sessionStorage.setItem(
          "frontDesignImage",
          frontDesignImage === defaultImageSrc ? null : frontDesignImage
        );
        sessionStorage.setItem(
          "backDesignImage",
          backDesignImage === defaultImageSrc ? null : backDesignImage
        );
        sessionStorage.setItem("printDetailsImage", printDetails);
        sessionStorage.setItem(
          "designNotes",
          designNotes || "Design notes were left empty"
        ); // Store default message if empty
        sessionStorage.setItem("shirtDetails", JSON.stringify(orderItems));

        // 6. Redirect to checkout
        window.location.href = "/checkout";
      });
    </script>
  </body>
</html>
